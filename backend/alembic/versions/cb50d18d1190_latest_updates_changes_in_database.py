"""latest updates changes in database

Revision ID: cb50d18d1190
Revises: 4644a2459b2b
Create Date: 2024-10-10 13:49:44.099952

"""
from alembic import op
import fastapi_users_db_sqlalchemy
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "cb50d18d1190"
down_revision = "4644a2459b2b"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "embedding_provider",
        sa.Column(
            "provider_type",
            sa.Enum(
                "OPENAI",
                "COHERE",
                "VOYAGE",
                "GOOGLE",
                "LITELLM",
                name="embeddingprovider",
            ),
            nullable=False,
        ),
        sa.Column("api_url", sa.String(), nullable=True),
        sa.Column("api_key", sa.LargeBinary(), nullable=True),
        sa.PrimaryKeyConstraint("provider_type"),
    )
    op.create_table(
        "standard_answer",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("keyword", sa.String(), nullable=False),
        sa.Column("answer", sa.String(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("match_regex", sa.Boolean(), nullable=False),
        sa.Column("match_any_keywords", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "unique_keyword_active",
        "standard_answer",
        ["keyword", "active"],
        unique=True,
        postgresql_where=sa.text("active = true"),
    )
    op.create_table(
        "standard_answer_category",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "inputprompt",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("prompt", sa.String(), nullable=False),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("is_public", sa.Boolean(), nullable=False),
        sa.Column(
            "user_id",
            fastapi_users_db_sqlalchemy.generics.GUID(),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "llm_provider__teamspace",
        sa.Column("llm_provider_id", sa.Integer(), nullable=False),
        sa.Column("teamspace_id", sa.Integer(), nullable=False),
        sa.Column("is_current", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["llm_provider_id"],
            ["llm_provider.id"],
        ),
        sa.ForeignKeyConstraint(
            ["teamspace_id"],
            ["teamspace.id"],
        ),
        sa.PrimaryKeyConstraint("llm_provider_id", "teamspace_id", "is_current"),
    )
    op.create_table(
        "notification",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "notif_type",
            sa.Enum("REINDEX", name="notificationtype", native_enum=False),
            nullable=False,
        ),
        sa.Column(
            "user_id",
            fastapi_users_db_sqlalchemy.generics.GUID(),
            nullable=True,
        ),
        sa.Column("dismissed", sa.Boolean(), nullable=False),
        sa.Column("last_shown", sa.DateTime(timezone=True), nullable=False),
        sa.Column("first_shown", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )

    # drop the old one since this is originally renamed
    op.drop_constraint(
        "index_attempt__embedding_model_fk",
        "index_attempt",
        type_="foreignkey",
    )
    op.drop_index("ix_embedding_model_future_unique", table_name="embedding_model")
    op.drop_index("ix_embedding_model_present_unique", table_name="embedding_model")
    op.drop_table("embedding_model")
    # embedding_model -> search_settings
    op.create_table(
        "search_settings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("model_name", sa.String(), nullable=False),
        sa.Column("model_dim", sa.Integer(), nullable=False),
        sa.Column("normalize", sa.Boolean(), nullable=False),
        sa.Column("query_prefix", sa.String(), nullable=True),
        sa.Column("passage_prefix", sa.String(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "PAST",
                "PRESENT",
                "FUTURE",
                name="indexmodelstatus",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column("index_name", sa.String(), nullable=False),
        sa.Column(
            "provider_type",
            sa.Enum(
                "OPENAI",
                "COHERE",
                "VOYAGE",
                "GOOGLE",
                "LITELLM",
                name="embeddingprovider",
            ),
            nullable=True,
        ),
        sa.Column("multipass_indexing", sa.Boolean(), nullable=False),
        sa.Column(
            "multilingual_expansion",
            postgresql.ARRAY(sa.String()),
            nullable=False,
        ),
        sa.Column("disable_rerank_for_streaming", sa.Boolean(), nullable=False),
        sa.Column("rerank_model_name", sa.String(), nullable=True),
        sa.Column(
            "rerank_provider_type",
            sa.Enum("COHERE", "LITELLM", name="rerankerprovider", native_enum=False),
            nullable=True,
        ),
        sa.Column("rerank_api_key", sa.String(), nullable=True),
        sa.Column("rerank_api_url", sa.String(), nullable=True),
        sa.Column("num_rerank", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["provider_type"],
            ["embedding_provider.provider_type"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_embedding_model_future_unique",
        "search_settings",
        ["status"],
        unique=True,
        postgresql_where=sa.text("status = 'FUTURE'"),
    )
    op.create_index(
        "ix_embedding_model_present_unique",
        "search_settings",
        ["status"],
        unique=True,
        postgresql_where=sa.text("status = 'PRESENT'"),
    )
    op.create_table(
        "standard_answer__standard_answer_category",
        sa.Column("standard_answer_id", sa.Integer(), nullable=False),
        sa.Column("standard_answer_category_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["standard_answer_category_id"],
            ["standard_answer_category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["standard_answer_id"],
            ["standard_answer.id"],
        ),
        sa.PrimaryKeyConstraint("standard_answer_id", "standard_answer_category_id"),
    )
    op.create_table(
        "credential__teamspace",
        sa.Column("credential_id", sa.Integer(), nullable=False),
        sa.Column("teamspace_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["credential_id"],
            ["credential.id"],
        ),
        sa.ForeignKeyConstraint(
            ["teamspace_id"],
            ["teamspace.id"],
        ),
        sa.PrimaryKeyConstraint("credential_id", "teamspace_id"),
    )
    op.create_table(
        "inputprompt__user",
        sa.Column("input_prompt_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["input_prompt_id"],
            ["inputprompt.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["inputprompt.id"],
        ),
        sa.PrimaryKeyConstraint("input_prompt_id", "user_id"),
    )
    op.create_table(
        "user__external_teamspace_id",
        sa.Column(
            "user_id",
            fastapi_users_db_sqlalchemy.generics.GUID(),
            nullable=False,
        ),
        sa.Column("external_teamspace_id", sa.String(), nullable=False),
        sa.Column("cc_pair_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["cc_pair_id"],
            ["connector_credential_pair.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "external_teamspace_id"),
    )
    op.create_table(
        "chat_message__standard_answer",
        sa.Column("chat_message_id", sa.Integer(), nullable=False),
        sa.Column("standard_answer_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["chat_message_id"],
            ["chat_message.id"],
        ),
        sa.ForeignKeyConstraint(
            ["standard_answer_id"],
            ["standard_answer.id"],
        ),
        sa.PrimaryKeyConstraint("chat_message_id", "standard_answer_id"),
    )
    op.create_table(
        "index_attempt_errors",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("index_attempt_id", sa.Integer(), nullable=True),
        sa.Column("batch", sa.Integer(), nullable=True),
        sa.Column(
            "doc_summaries",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column("error_msg", sa.Text(), nullable=True),
        sa.Column("traceback", sa.Text(), nullable=True),
        sa.Column(
            "time_created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["index_attempt_id"],
            ["index_attempt.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "index_attempt_id",
        "index_attempt_errors",
        ["time_created"],
        unique=False,
    )
    op.drop_table("permission_sync_run")
    op.drop_table("email_to_external_user_cache")
    op.drop_table("external_permission")

    # to handle revision smoothly without affecting the data in the database
    op.add_column("assistant", sa.Column("chunks_above", sa.Integer(), nullable=True))
    op.add_column("assistant", sa.Column("chunks_below", sa.Integer(), nullable=True))

    op.execute(
        "UPDATE assistant SET chunks_above = 1, chunks_below = 1 WHERE chunks_above IS NULL AND chunks_below IS NULL"
    )

    op.alter_column("assistant", "chunks_above", nullable=False)
    op.alter_column("assistant", "chunks_below", nullable=False)

    op.add_column(
        "assistant",
        sa.Column("search_start_date", sa.DateTime(timezone=True), nullable=True),
    )

    # move the default assistant into builtin assistant
    op.add_column(
        "assistant",
        sa.Column("builtin_assistant", sa.Boolean(), nullable=True),
    )
    op.execute("UPDATE assistant SET builtin_assistant = default_assistant")
    op.alter_column("assistant", "builtin_assistant", nullable=False)
    # ==== #
    op.add_column(
        "assistant",
        sa.Column("is_default_assistant", sa.Boolean(), nullable=True),
    )
    op.add_column(
        "assistant", sa.Column("uploaded_image_id", sa.String(), nullable=True)
    )
    op.add_column("assistant", sa.Column("icon_color", sa.String(), nullable=True))
    op.add_column("assistant", sa.Column("icon_shape", sa.Integer(), nullable=True))
    op.drop_index("_default_assistant_name_idx", table_name="assistant")
    op.create_index(
        "_builtin_assistant_name_idx",
        "assistant",
        ["name"],
        unique=True,
        postgresql_where=sa.text("builtin_assistant = true"),
    )
    op.drop_constraint("assistant__user_fk", "assistant", type_="foreignkey")
    op.create_foreign_key(
        "assistant__user_fk",
        "assistant",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("assistant", "search_type")
    op.drop_column("assistant", "default_assistant")
    op.drop_column("assistant__teamspace", "is_current")
    op.alter_column(
        "assistant__user", "user_id", existing_type=sa.UUID(), nullable=False
    )
    op.drop_constraint(
        "assistant__user_user_id_fkey", "assistant__user", type_="foreignkey"
    )
    op.create_foreign_key(
        "assistant__user_user_id_fkey",
        "assistant__user",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint("chat_folder_user_id_fkey", "chat_folder", type_="foreignkey")
    op.create_foreign_key(
        "chat_folder_user_id_fkey",
        "chat_folder",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.add_column(
        "chat_message",
        sa.Column("overridden_model", sa.String(), nullable=True),
    )
    op.alter_column(
        "chat_session",
        "assistant_id",
        existing_type=sa.INTEGER(),
        nullable=True,
    )
    op.drop_constraint("chat_session_user_id_fkey", "chat_session", type_="foreignkey")
    op.create_foreign_key(
        "chat_session_user_id_fkey",
        "chat_session",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.add_column(
        "connector", sa.Column("indexing_start", sa.DateTime(), nullable=True)
    )

    # create and update the existing table with the new "status" column
    op.add_column(
        "connector_credential_pair",
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE",
                "PAUSED",
                "DELETING",
                name="connectorcredentialpairstatus",
                native_enum=False,
            ),
            nullable=True,
        ),
    )

    # Update status of connector_credential_pair based on connector's disabled status
    op.execute(
        """
        UPDATE connector_credential_pair
        SET status = CASE
            WHEN (
                SELECT disabled
                FROM connector
                WHERE connector.id = connector_credential_pair.connector_id
            ) = FALSE THEN 'ACTIVE'
            ELSE 'PAUSED'
        END
        """
    )

    # Make the status column not nullable after setting values
    op.alter_column("connector_credential_pair", "status", nullable=False)

    op.drop_column("connector", "disabled")

    op.add_column(
        "connector_credential_pair",
        sa.Column("deletion_failure_message", sa.String(), nullable=True),
    )

    # Admin user who set up connectors will lose access to the docs temporarily
    # only way currently to give back access is to rerun from beginning
    op.add_column(
        "connector_credential_pair",
        sa.Column(
            "access_type",
            sa.String(),
            nullable=True,
        ),
    )
    op.execute(
        "UPDATE connector_credential_pair SET access_type = 'PUBLIC' WHERE is_public = true"
    )
    op.execute(
        "UPDATE connector_credential_pair SET access_type = 'PRIVATE' WHERE is_public = false"
    )
    op.alter_column("connector_credential_pair", "access_type", nullable=False)
    # ======== #

    op.add_column(
        "connector_credential_pair",
        sa.Column(
            "auto_sync_options",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
    )
    op.add_column(
        "connector_credential_pair",
        sa.Column("last_time_perm_sync", sa.DateTime(timezone=True), nullable=True),
    )
    op.drop_column("connector_credential_pair", "is_public")

    # Add the new 'source' column to the 'credential' table
    op.add_column(
        "credential",
        sa.Column(
            "source",
            sa.String(length=100),  # Use String instead of Enum
            nullable=True,  # Initially allow NULL values
        ),
    )
    op.add_column(
        "credential",
        sa.Column(
            "name",
            sa.String(),
            nullable=True,
        ),
    )

    # Create a temporary table that maps each credential to a single connector source.
    # This is needed because a credential can be associated with multiple connectors,
    # but we want to assign a single source to each credential.
    # We use DISTINCT ON to ensure we only get one row per credential_id.
    op.execute(
        """
    CREATE TEMPORARY TABLE temp_connector_credential AS
    SELECT DISTINCT ON (cc.credential_id)
        cc.credential_id,
        c.source AS connector_source
    FROM connector_credential_pair cc
    JOIN connector c ON cc.connector_id = c.id
    """
    )

    # Update the 'source' column in the 'credential' table
    op.execute(
        """
    UPDATE credential cred
    SET source = COALESCE(
        (SELECT connector_source
         FROM temp_connector_credential temp
         WHERE cred.id = temp.credential_id),
        'NOT_APPLICABLE'
    )
    """
    )
    # If no exception was raised, alter the column
    op.alter_column("credential", "source", nullable=True)  # TODO modify
    # ====== #

    op.add_column(
        "credential",
        sa.Column(
            "curator_public", sa.Boolean(), nullable=False, server_default="false"
        ),
    )

    op.drop_constraint("credential_user_id_fkey", "credential", type_="foreignkey")
    op.create_foreign_key(
        "credential_user_id_fkey",
        "credential",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )

    # last modified represents the last time anything needing syncing to vespa changed
    # including row metadata and the document itself. This obviously does not include
    # the last_synced column.
    op.add_column(
        "document",
        sa.Column(
            "last_modified",
            sa.DateTime(timezone=True),
            nullable=False,
            server_default=sa.func.now(),
        ),
    )

    # last synced represents the last time this document was synced to Vespa
    op.add_column(
        "document",
        sa.Column("last_synced", sa.DateTime(timezone=True), nullable=True),
    )

    # Set last_synced to the same value as last_modified for existing rows
    op.execute(
        """
        UPDATE document
        SET last_synced = last_modified
        """
    )

    op.add_column(
        "document",
        sa.Column(
            "external_user_emails",
            postgresql.ARRAY(sa.String()),
            nullable=True,
        ),
    )
    op.add_column(
        "document",
        sa.Column(
            "external_teamspace_ids",
            postgresql.ARRAY(sa.String()),
            nullable=True,
        ),
    )

    # ===== #
    op.add_column(
        "connector_credential_pair",
        sa.Column("is_public", sa.Boolean(), nullable=True),
    )
    # fill in is_public for existing rows
    op.execute(
        "UPDATE connector_credential_pair SET is_public = true WHERE is_public IS NULL"
    )
    op.alter_column("connector_credential_pair", "is_public", nullable=False)
    # ===== #

    op.create_index(
        op.f("ix_document_last_modified"),
        "document",
        ["last_modified"],
        unique=False,
    )
    op.create_index(
        op.f("ix_document_last_synced"),
        "document",
        ["last_synced"],
        unique=False,
    )

    op.drop_constraint("document_set_user_id_fkey", "document_set", type_="foreignkey")
    op.create_foreign_key(
        "document_set_user_id_fkey",
        "document_set",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )

    op.drop_column("document_set__teamspace", "is_current")

    op.drop_constraint(
        "document_set__user_user_id_fkey",
        "document_set__user",
        type_="foreignkey",
    )
    op.alter_column(
        "document_set__user", "user_id", existing_type=sa.UUID(), nullable=True
    )
    op.create_foreign_key(
        "document_set__user_user_id_fkey",
        "document_set__user",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )

    # Add the new connector_credential_pair_id column
    op.add_column(
        "index_attempt",
        sa.Column("connector_credential_pair_id", sa.Integer(), nullable=True),
    )
    # Populate the new connector_credential_pair_id column using existing connector_id and credential_id
    op.execute(
        """
        UPDATE index_attempt ia
        SET connector_credential_pair_id = (
            SELECT id FROM connector_credential_pair ccp
            WHERE
                (ia.connector_id IS NULL OR ccp.connector_id = ia.connector_id)
                AND (ia.credential_id IS NULL OR ccp.credential_id = ia.credential_id)
            LIMIT 1
        )
        WHERE ia.connector_id IS NOT NULL OR ia.credential_id IS NOT NULL
        """
    )
    # For good measure
    op.execute(
        """
        DELETE FROM index_attempt
        WHERE connector_credential_pair_id IS NULL
        """
    )
    # Make the new connector_credential_pair_id column non-nullable
    op.alter_column("index_attempt", "connector_credential_pair_id", nullable=False)
    # ======= #

    # ======= #
    # Add the new column as nullable initially
    op.add_column(
        "index_attempt", sa.Column("search_settings_id", sa.Integer(), nullable=True)
    )

    # Populate the new column with data from the existing embedding_model_id
    op.execute("UPDATE index_attempt SET search_settings_id = embedding_model_id")

    # Create the foreign key constraint
    op.create_foreign_key(
        "fk_index_attempt_search_settings",
        "index_attempt",
        "search_settings",
        ["search_settings_id"],
        ["id"],
    )

    # Make the new column non-nullable
    op.alter_column("index_attempt", "search_settings_id", nullable=False)
    # ===== #

    op.drop_index(
        "ix_index_attempt_latest_for_connector_credential_pair",
        table_name="index_attempt",
    )
    op.create_index(
        "ix_index_attempt_latest_for_connector_credential_pair",
        "index_attempt",
        ["connector_credential_pair_id", "time_created"],
        unique=False,
    )

    op.drop_constraint(
        "fk_index_attempt_credential_id", "index_attempt", type_="foreignkey"
    )
    op.create_foreign_key(
        "fk_index_attempt_credential_id",
        "index_attempt",
        "connector_credential_pair",
        ["connector_credential_pair_id"],
        ["id"],
    )

    op.drop_constraint(
        "fk_index_attempt_connector_id", "index_attempt", type_="foreignkey"
    )
    op.create_foreign_key(
        "fk_index_attempt_connector_id",
        "index_attempt",
        "search_settings",
        ["search_settings_id"],
        ["id"],
    )

    op.drop_column("index_attempt", "connector_id")
    op.drop_column("index_attempt", "embedding_model_id")
    op.drop_column("index_attempt", "credential_id")
    op.add_column(
        "llm_provider",
        sa.Column("display_model_names", postgresql.ARRAY(sa.String()), nullable=True),
    )
    op.add_column(
        "llm_provider",
        sa.Column("is_public", sa.Boolean(), nullable=False, server_default="true"),
    )

    op.drop_constraint("prompt_user_id_fkey", "prompt", type_="foreignkey")
    op.create_foreign_key(
        "prompt_user_id_fkey", "prompt", "user", ["user_id"], ["id"], ondelete="CASCADE"
    )

    op.drop_constraint("saml_user_id_fkey", "saml", type_="foreignkey")
    op.create_foreign_key(
        "saml_user_id_fkey", "saml", "user", ["user_id"], ["id"], ondelete="CASCADE"
    )

    op.add_column("search_doc", sa.Column("is_internet", sa.Boolean(), nullable=True))
    op.add_column("search_doc", sa.Column("is_relevant", sa.Boolean(), nullable=True))
    op.add_column(
        "search_doc",
        sa.Column("relevance_explanation", sa.String(), nullable=True),
    )
    op.add_column("tool", sa.Column("display_name", sa.String(), nullable=True))
    op.add_column(
        "tool",
        sa.Column(
            "custom_headers",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
    )

    op.drop_constraint("tool_user_fk", "tool", type_="foreignkey")
    op.create_foreign_key(
        "tool_user_fk", "tool", "user", ["user_id"], ["id"], ondelete="CASCADE"
    )

    op.drop_constraint(
        "usage_reports_requestor_user_id_fkey",
        "usage_reports",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "usage_reports_requestor_user_id_fkey",
        "usage_reports",
        "user",
        ["requestor_user_id"],
        ["id"],
        ondelete="CASCADE",
    )

    # ====== #
    op.add_column(
        "user", sa.Column("visible_assistants", postgresql.JSONB(), nullable=True)
    )
    op.add_column(
        "user", sa.Column("hidden_assistants", postgresql.JSONB(), nullable=True)
    )
    op.execute(
        "UPDATE \"user\" SET visible_assistants = '[]'::jsonb, hidden_assistants = '[]'::jsonb"
    )
    op.alter_column(
        "user",
        "visible_assistants",
        nullable=False,
        server_default=sa.text("'[]'::jsonb"),
    )
    op.alter_column(
        "user",
        "hidden_assistants",
        nullable=False,
        server_default=sa.text("'[]'::jsonb"),
    )
    # ====== #

    op.add_column(
        "user", sa.Column("oidc_expiry", sa.DateTime(timezone=True), nullable=True)
    )
    op.add_column("user", sa.Column("default_model", sa.Text(), nullable=True))

    # Step 1: Update any NULL values to the default value
    # This upgrades existing users without ordered assistant
    # to have default assistants set to visible assistants which are
    # accessible by them.
    op.execute(
        """
        UPDATE "user" u
        SET chosen_assistants = (
            SELECT jsonb_agg(
                p.id ORDER BY
                    COALESCE(p.display_priority, 2147483647) ASC,
                    p.id ASC
            )
            FROM assistant p
            LEFT JOIN assistant__user pu ON p.id = pu.assistant_id AND pu.user_id = u.id
            WHERE p.is_visible = true
            AND (p.is_public = true OR pu.user_id IS NOT NULL)
        )
        WHERE chosen_assistants IS NULL
        OR chosen_assistants = 'null'
        OR jsonb_typeof(chosen_assistants) = 'null'
        OR (jsonb_typeof(chosen_assistants) = 'string' AND chosen_assistants = '"null"')
    """
    )

    # Step 2: Alter the column to make it non-nullable
    DEFAULT_ASSISTANTS = [-2, -1, 0]
    op.alter_column(
        "user",
        "chosen_assistants",
        type_=postgresql.JSONB(astext_type=sa.Text()),
        nullable=False,
        server_default=sa.text(f"'{DEFAULT_ASSISTANTS}'::jsonb"),
    )
    # ====== #

    op.add_column(
        "user__teamspace",
        sa.Column("is_curator", sa.Boolean(), nullable=False, server_default="false"),
    )
    op.alter_column(
        "user__teamspace", "user_id", existing_type=sa.UUID(), nullable=True
    )

    op.drop_constraint(
        "user__teamspace_user_id_fkey", "user__teamspace", type_="foreignkey"
    )
    op.create_foreign_key(
        "user__teamspace_user_id_fkey",
        "user__teamspace",
        "user",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user__teamspace",
        sa.Column("role", sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "user__teamspace", type_="foreignkey")
    op.create_foreign_key(
        "user__teamspace_user_id_fkey",
        "user__teamspace",
        "user",
        ["user_id"],
        ["id"],
    )
    op.alter_column(
        "user__teamspace", "user_id", existing_type=sa.UUID(), nullable=False
    )
    op.drop_column("user__teamspace", "is_curator")
    op.alter_column(
        "user",
        "chosen_assistants",
        existing_type=postgresql.ARRAY(sa.INTEGER()),
        nullable=True,
    )
    op.drop_column("user", "default_model")
    op.drop_column("user", "oidc_expiry")
    op.drop_column("user", "hidden_assistants")
    op.drop_column("user", "visible_assistants")
    op.drop_constraint(None, "usage_reports", type_="foreignkey")
    op.create_foreign_key(
        "usage_reports_requestor_user_id_fkey",
        "usage_reports",
        "user",
        ["requestor_user_id"],
        ["id"],
    )
    op.drop_constraint(None, "tool", type_="foreignkey")
    op.create_foreign_key("tool_user_fk", "tool", "user", ["user_id"], ["id"])
    op.drop_column("tool", "custom_headers")
    op.drop_column("tool", "display_name")
    op.drop_column("search_doc", "relevance_explanation")
    op.drop_column("search_doc", "is_relevant")
    op.drop_column("search_doc", "is_internet")
    op.drop_constraint(None, "saml", type_="foreignkey")
    op.create_foreign_key("saml_user_id_fkey", "saml", "user", ["user_id"], ["id"])
    op.drop_constraint(None, "prompt", type_="foreignkey")
    op.create_foreign_key("prompt_user_id_fkey", "prompt", "user", ["user_id"], ["id"])
    op.drop_column("llm_provider", "is_public")
    op.drop_column("llm_provider", "display_model_names")
    op.add_column(
        "index_attempt",
        sa.Column("credential_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "index_attempt",
        sa.Column(
            "embedding_model_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "index_attempt",
        sa.Column("connector_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "index_attempt", type_="foreignkey")
    op.drop_constraint(None, "index_attempt", type_="foreignkey")
    op.create_foreign_key(
        "fk_index_attempt_connector_id",
        "index_attempt",
        "connector",
        ["connector_id"],
        ["id"],
    )
    op.create_foreign_key(
        "index_attempt__embedding_model_fk",
        "index_attempt",
        "embedding_model",
        ["embedding_model_id"],
        ["id"],
    )
    op.create_foreign_key(
        "fk_index_attempt_credential_id",
        "index_attempt",
        "credential",
        ["credential_id"],
        ["id"],
    )
    op.drop_index(
        "ix_index_attempt_latest_for_connector_credential_pair",
        table_name="index_attempt",
    )
    op.create_index(
        "ix_index_attempt_latest_for_connector_credential_pair",
        "index_attempt",
        ["connector_id", "credential_id", "time_created"],
        unique=False,
    )
    op.drop_column("index_attempt", "search_settings_id")
    op.drop_column("index_attempt", "connector_credential_pair_id")

    op.drop_constraint(
        "document_set__user_user_id_fkey", "document_set__user", type_="foreignkey"
    )
    op.create_foreign_key(
        "document_set__user_user_id_fkey",
        "document_set__user",
        "user",
        ["user_id"],
        ["id"],
    )
    op.alter_column(
        "document_set__user",
        "user_id",
        existing_type=sa.UUID(),
        nullable=False,
    )
    op.add_column(
        "document_set__teamspace",
        sa.Column("is_current", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "document_set", type_="foreignkey")
    op.create_foreign_key(
        "document_set_user_id_fkey",
        "document_set",
        "user",
        ["user_id"],
        ["id"],
    )
    op.drop_index(op.f("ix_document_last_synced"), table_name="document")
    op.drop_index(op.f("ix_document_last_modified"), table_name="document")
    op.drop_column("document", "is_public")
    op.drop_column("document", "external_teamspace_ids")
    op.drop_column("document", "external_user_emails")
    op.drop_column("document", "last_synced")
    op.drop_column("document", "last_modified")
    op.drop_constraint(None, "credential", type_="foreignkey")
    op.create_foreign_key(
        "credential_user_id_fkey", "credential", "user", ["user_id"], ["id"]
    )
    op.drop_column("credential", "curator_public")
    op.drop_column("credential", "source")
    op.drop_column("credential", "name")
    op.add_column(
        "connector_credential_pair",
        sa.Column("is_public", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.drop_column("connector_credential_pair", "last_time_perm_sync")
    op.drop_column("connector_credential_pair", "auto_sync_options")
    op.drop_column("connector_credential_pair", "access_type")
    op.drop_column("connector_credential_pair", "deletion_failure_message")
    op.drop_column("connector_credential_pair", "status")
    op.add_column(
        "connector",
        sa.Column("disabled", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.drop_column("connector", "indexing_start")
    op.drop_constraint("chat_session_user_id_fkey", "chat_session", type_="foreignkey")
    op.create_foreign_key(
        "chat_session_user_id_fkey",
        "chat_session",
        "user",
        ["user_id"],
        ["id"],
    )
    op.alter_column(
        "chat_session",
        "assistant_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.drop_column("chat_message", "overridden_model")
    op.drop_constraint("chat_folder_user_id_fkey", "chat_folder", type_="foreignkey")
    op.create_foreign_key(
        "chat_folder_user_id_fkey", "chat_folder", "user", ["user_id"], ["id"]
    )
    op.drop_constraint(None, "assistant__user", type_="foreignkey")
    op.create_foreign_key(
        "assistant__user_user_id_fkey",
        "assistant__user",
        "user",
        ["user_id"],
        ["id"],
    )
    op.alter_column(
        "assistant__user", "user_id", existing_type=sa.UUID(), nullable=False
    )
    op.add_column(
        "assistant__teamspace",
        sa.Column("is_current", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "assistant",
        sa.Column(
            "default_assistant",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "assistant",
        sa.Column("search_type", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "assistant", type_="foreignkey")
    op.create_foreign_key(
        "assistant__user_fk", "assistant", "user", ["user_id"], ["id"]
    )
    op.drop_index(
        "_builtin_assistant_name_idx",
        table_name="assistant",
        postgresql_where=sa.text("builtin_assistant = true"),
    )
    op.create_index("_default_assistant_name_idx", "assistant", ["name"], unique=False)
    op.drop_column("assistant", "icon_shape")
    op.drop_column("assistant", "icon_color")
    op.drop_column("assistant", "uploaded_image_id")
    op.drop_column("assistant", "is_default_assistant")
    op.drop_column("assistant", "builtin_assistant")
    op.drop_column("assistant", "search_start_date")
    op.drop_column("assistant", "chunks_below")
    op.drop_column("assistant", "chunks_above")
    op.create_table(
        "external_permission",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("source_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "external_permission_group",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="external_permission_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="external_permission_pkey"),
    )
    op.create_table(
        "email_to_external_user_cache",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "external_user_id",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "source_type",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name="email_to_external_user_cache_user_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="email_to_external_user_cache_pkey"),
    )
    op.create_table(
        "permission_sync_run",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("source_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("update_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("cc_pair_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("error_msg", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["cc_pair_id"],
            ["connector_credential_pair.id"],
            name="permission_sync_run_cc_pair_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="permission_sync_run_pkey"),
    )
    op.create_table(
        "embedding_model",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("model_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("model_dim", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("normalize", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("query_prefix", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("passage_prefix", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("index_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="embedding_model_pkey"),
    )
    op.create_index(
        "ix_embedding_model_present_unique",
        "embedding_model",
        ["status"],
        unique=False,
    )
    op.create_index(
        "ix_embedding_model_future_unique",
        "embedding_model",
        ["status"],
        unique=False,
    )
    op.drop_index("index_attempt_id", table_name="index_attempt_errors")
    op.drop_table("index_attempt_errors")
    op.drop_table("chat_message__standard_answer")
    op.drop_table("user__external_teamspace_id")
    op.drop_table("inputprompt__user")
    op.drop_table("credential__teamspace")
    op.drop_table("standard_answer__standard_answer_category")
    op.drop_index(
        "ix_embedding_model_present_unique",
        table_name="search_settings",
        postgresql_where=sa.text("status = 'PRESENT'"),
    )
    op.drop_index(
        "ix_embedding_model_future_unique",
        table_name="search_settings",
        postgresql_where=sa.text("status = 'FUTURE'"),
    )
    op.drop_table("search_settings")
    op.drop_table("notification")
    op.drop_table("llm_provider__teamspace")
    op.drop_table("inputprompt")
    op.drop_table("standard_answer_category")
    op.drop_index(
        "unique_keyword_active",
        table_name="standard_answer",
        postgresql_where=sa.text("active = true"),
    )
    op.drop_table("standard_answer")
    op.drop_table("embedding_provider")
    # ### end Alembic commands ###
